<?php

namespace Tests\Routes\ModuleName;

use App\Modules\ModuleName\Docs\ServiceNameRouteDoc;
use App\Modules\ModuleName\Dto\CreateServiceNameDto;
use App\Modules\ModuleName\Dto\SearchServiceNameDto;
use App\Modules\ModuleName\Dto\UpdateServiceNameDto;
use App\Modules\ModuleName\Models\ServiceName;
use App\Modules\Users\Models\Users;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;
use PHPOpenSourceSaver\JWTAuth\Facades\JWTAuth;

class ServiceNameRouteTest extends TestCase
{
    /**
     * @testdox [POST] /v1/{{route}}
     */
    public function testRouteServiceNameCreate()
    {
        {{header_tests}}
        $userAdmin->access_token = JWTAuth::fromUser($userAdmin);
        $ServiceNameData = ServiceName::factory()->raw();

        $response = $this->withPost('/v1/{{route}}')
            ->setRouteInfo('CreateServiceName', ServiceNameRouteDoc::class)
            ->addHeader('Authorization', 'Bearer ' . $userAdmin->access_token, 'Authorization')
            ->addGroups(['NamePtBr'])
            ->addBody($ServiceNameData, CreateServiceNameDto::class)
            ->run();

        $responseData = json_decode($response->getContent(), true);

        $response->assertStatus(200);
        $this->assertTrue($responseData['success']);
        $this->assertEqualsArrayLeft($ServiceNameData, $responseData['data'], ['password']);
    }

    /**
     * @testdox [POST] /v1/{{route}}/:id
     */
    public function testRouteServiceNameUpdate()
    {
        {{header_tests}}
        $userAdmin->access_token = JWTAuth::fromUser($userAdmin);
        $ServiceNameData = ServiceName::factory()->raw();
        $resource = ServiceName::factory()->create();

        $response = $this->withPost('/v1/{{route}}/:id')
            ->addPath('id', $resource->id, 'ID do NamePtBr')
            ->setRouteInfo('UpdateServiceName', ServiceNameRouteDoc::class)
            ->addHeader('Authorization', 'Bearer ' . $userAdmin->access_token, 'Authorization')
            ->addGroups(['NamePtBr'])
            ->addBody($ServiceNameData, UpdateServiceNameDto::class)
            ->run();

        $responseData = json_decode($response->getContent(), true);

        $response->assertStatus(200);
        $this->assertTrue($responseData['success']);
        $this->assertEqualsArrayLeft($ServiceNameData, $responseData['data'], ['password']);
    }

    /**
     * @testdox [GET] /v1/{{route}}/:id
     */
    public function testRouteServiceNameGet()
    {
        {{header_tests}}
        $userAdmin->access_token = JWTAuth::fromUser($userAdmin);

        $resource = ServiceName::factory()->create();

        $response = $this->withGet('/v1/{{route}}/:id')
            ->addPath('id', $resource->id, 'ID do NamePtBr')
            ->setRouteInfo('GetServiceName', ServiceNameRouteDoc::class)
            ->addHeader('Authorization', 'Bearer ' . $userAdmin->access_token, 'Authorization')
            ->addGroups(['NamePtBr'])
            ->run();

        $responseData = json_decode($response->getContent(), true);

        $response->assertStatus(200);
        $this->assertTrue($responseData['success']);
        $this->assertEqualsArrayLeft($resource->getAttributes(), $responseData['data'], ['password']);
    }

    /**
     * @testdox [POST] /v1/{{route}}/search
     */
    public function testRouteServiceNameSearch()
    {
        {{header_tests}}
        $userAdmin->access_token = JWTAuth::fromUser($userAdmin);
        ServiceName::factory()->count(3)->create();

        $response = $this->withPost('/v1/{{route}}/search')
            ->setRouteInfo('SearchServiceName', ServiceNameRouteDoc::class)
            ->addHeader('Authorization', 'Bearer ' . $userAdmin->access_token, 'Authorization')
            ->addGroups(['NamePtBr'])
            ->addBody([
                'filters' => [
                    'id' => 1
                ]
            ], SearchServiceNameDto::class)
            ->run();

        $responseData = json_decode($response->getContent(), true);

        $response->assertStatus(200);
        $this->assertEquals(1, $responseData['data']['count']);
        $this->assertEquals(1, count($responseData['data']['results']));
    }

    /**
     * @testdox [DELETE] /v1/{{route}}/:id
     */
    public function testRouteServiceNameDelete()
    {
        {{header_tests}}
        $userAdmin->access_token = JWTAuth::fromUser($userAdmin);

        $resource = ServiceName::factory()->create();

        $response = $this->withDelete('/v1/{{route}}/:id')
            ->addPath('id', $resource->id, 'Id do NamePtBr')
            ->setRouteInfo('GetServiceName', ServiceNameRouteDoc::class)
            ->addHeader('Authorization', 'Bearer ' . $userAdmin->access_token, 'Authorization')
            ->addGroups(['NamePtBr'])
            ->run();

        $responseData = json_decode($response->getContent(), true);

        $response->assertStatus(200);
        $this->assertTrue($responseData['success']);
        $this->assertTrue(!!$responseData['data']);
    }
}
